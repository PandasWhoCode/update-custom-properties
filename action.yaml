name: 'Custom Properties Update Action'
description: 'Updates the custom properties in a repository'
author: 'Andrew Brandt <andrew.brandt@hashgraph.com>'
branding:
  icon: 'check-circle'
  color: 'purple'

inputs:
  token:
    description: 'Personal Access Token'
    required: true


permissions:
  contents: read
  actions: read

runs:
  using: "composite"

  steps:
    - name: Echo hello world
      shell: bash
      run: echo "Hello World"

    - name: Print the current github information
      shell: bash
      run: |
        echo "Current variables:"
        echo "Full repo org/repo name: ${{ github.repository }}"
        echo "Repo owner: ${{ github.repository_owner }}"
        echo "Repo name: ${{ github.event.repository.name }}"

    - name: Install yq (mikefarah's version)
      shell: bash
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version  # sanity check

    - name: Install jq
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y jq

    - name: Parse repo-properties.yaml and export metadata
      shell: bash
      run: |
        REPO_NAME=${{ github.event.repository.name }}
        YAML_FILE="repo-properties.yaml"
        
        echo "pwd here"
        pwd
        
        echo "ls here"
        ls
        
        echo "repo name:"
        echo ${REPO_NAME}
        
        echo "yaml file:"
        echo ${YAML_FILE}
        
        # Get all fields for the matching repo (as a JSON object)
        yq eval -o=json repo-properties.yaml > repo-properties.json
        
        # Confirm the JSON file is correct
        cat repo-properties.json
        
        REPO_NAME="my-example-repo"
        JSON_FILE="repo-properties.json"
        
        # Extract matching repo object using jq
        repo_data=$(jq -r --arg name "$REPO_NAME" '.repositories[] | select(.name == $name)' "$JSON_FILE")
        
        # print out the repo data
        echo "Repo data is:"
        echo repo_data
        
        # Optional: exit if not found
        if [[ -z "$repo_data" ]]; then
          echo "Repository '$REPO_NAME' not found."
          exit 1
        fi
          
        # Load the key-value pairs into an associative array
        declare -A repo_info
        while IFS="=" read -r key value; do
          repo_info["$key"]="$value"
        done < <(echo "$repo_data" | jq -r 'to_entries[] | "\(.key)=\(.value)"')
          
          # Print for debugging
          for k in "${!repo_info[@]}"; do
        echo "$k: ${repo_info[$k]}"
          done

