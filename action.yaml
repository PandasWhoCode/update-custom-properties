name: 'Custom Properties Update Action'
description: 'Updates the custom properties in a repository'
author: 'Andrew Brandt <andrew.brandt@hashgraph.com>'
branding:
  icon: 'check-circle'
  color: 'purple'

inputs:
  token:
    description: 'Personal Access Token'
    required: true


permissions:
  contents: read
  actions: read

runs:
  using: "composite"

  steps:
    - name: Echo hello world
      shell: bash
      run: echo "Hello World"

    - name: Print the current github information
      shell: bash
      run: |
        echo "Current variables:"
        echo "Full repo org/repo name: ${{ github.repository }}"
        echo "Repo owner: ${{ github.repository_owner }}"
        echo "Repo name: ${{ github.event.repository.name }}"

    - name: Install yq (mikefarah's version)
      shell: bash
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version  # sanity check

    - name: Install jq
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y jq

    - name: Convert from JSON to YAML
      shell: bash
      run: |
        REPO_NAME=${{ github.event.repository.name }}
        YAML_FILE="repo-properties.yaml"
        # Get all fields for the matching repo (as a JSON object)
        yq eval -o=json repo-properties.yaml > repo-properties.json
        ls repo-properties.json
        cat repo-properties.json
        echo "successfully created repo-properties.json"

    - name: Create list of repo names
      shell: bash
      run: |
        jq -r '.repositories[].name' repo-properties.json > repo-names.txt
        echo "Created repo-names.txt"
        cat repo-names.txt

    - name: Get current repo's
      shell: bash
      run: |
        REPO_NAME="my-example-repo"
        JSON_FILE="repo-properties.json"
        
        # Extract matching repo object using jq
        repo_data=$(jq -r --arg name "$REPO_NAME" '
        .repositories[]
        | select(.name == $name)
        | del(.name)
        ' "$JSON_FILE")
        
        echo "Repo data:"
        echo ${repo_data}
        
        # Extract all other key-value pairs (excluding "name")
        #jq -r 'to_entries[] | select(.key != "name") | "\(.key)=\(.value)"' "${repo_data}"
        #mapfile -t values << (jq -r 'to_entries[] | select(.key != "name") | "\(.key)=\(.value)"' "${repo_data}")
  
        echo "Values are:"
        #echo $values

#        # Optional: exit if not found
#        if [[ -z "$repo_data" ]]; then
#          echo "Repository '$REPO_NAME' not found."
#          exit 1
#        fi
#
#        # Load all key-value pairs except 'name' into an associative array
#        declare -A repo_info
#        while IFS="=" read -r key value; do
#          repo_info["$key"]="$value"
#        done << (echo "$repo_data" | jq -r 'to_entries[] | select(.key != "name") | "\(.key)=\(.value)"')
#
#        # Output for debugging
#        for k in "${!repo_info[@]}"; do
#          echo "$k: ${repo_info[$k]}"
#        done
